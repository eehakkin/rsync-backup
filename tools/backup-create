#! /bin/sh -Ceu
###########################################################################
# backup-create 0.0.20211031
#
# Copyright (C) 2010-2021 Eero Häkkinen <Eero+rsync-backup@Häkkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
# Try to be nice.
{
	ionice -c 3  -p "${$}"
	renice -n 99 -p "${$}"
} > /dev/null 2>&1 || :

# Locate the script.
me=$( command -v -- "${0}" || ls -d -- "${0}" )
me_dir=$( dirname -- "${me}" )
case ${me_dir} in
. ) dir=.. ;;
* ) dir=$( dirname -- "${me_dir}" ) ;;
esac

basename=${0##*[\\/]}
short_description='create a new backup directory'



# Parse options.
while :
do
	case ${1-} in
	--help | -h ) exec fmt -s -w "${COLUMNS:-$( tput cols )}" << __HELP__
Usage: ${basename} [<RSYNC-OPTION>]... <SRC>...
 or:   ${basename} [<RSYNC-OPTION>]... [<USER>@]<HOST>:<SRC>...
 or:   ${basename} [<RSYNC-OPTION>]... [<USER>@]<HOST>::<SRC>...
 or:   ${basename} [<RSYNC-OPTION>]... rsync://[<USER>@]<HOST>[:<PORT>]/<SRC>...
 or:   ${basename} <OPTION>...

Create a new backup directory using rsync(1).

The newly created backup directory \
is named according to the backup date and time and \
is a full backup directory \
containing direct (but possible filtered) copies \
of original files and directories. \
It can thus be accessed and restored directly.

A new backup directory is created using the following steps:

  An empty backup directory is created in a temporary directory.

  Files and directories are copied \
from sources \
to the newly created backup directory \
using rsync(1).

  A new symbolink link to denote the latest backup directory \
is created in a temporary directory.

  The newly created backup directory and \
the newly created symbolink link \
are moved to the final location.

Disk usage is minimised and \
the transfer is speeded up \
by hard linking files \
from old backup directories \
to the newly created backup directory \
whenever possible \
(when files in sources and previous backup directories are identical \
in content and in all preserved attributes).
On the btrfs and s3ql filesystems, \
hard linking \
is not needed and \
is therefore not used \
for disk usage minimisation.

Options:
    -h, --help[=<FORMAT>]
        Show this help message and exit.
    -V, --version
        Show version information and exit.

Rsync options:
$( exec rsync --help | exec sed '
	/^ *-/,/^$/!d
	/^ *--help/d
	/^ *--version/d
	/./!d
	s/^ */        /
	s/,-/, -/g
	/^ *-/{
		s//    -/
		s/\([^, ]\)  */\1\
        /
	}
' )

Operands:
    <SRC>
        A local source to be copied to a newly created backup directory.
    [<USER>@]<HOST>:<SRC>
        A remote shell source to be copied to a newly created backup directory.
    [<USER>@]<HOST>::<SRC>
        A rsync daemon source to be copied to a newly created backup directory.
    rsync://[<USER>@]<HOST>[:<PORT>]/<SRC>
        A rsync daemon source to be copied to a newly created backup directory.

Files:
    ${dir}/<YEAR>
        A yearly backup directory.
    ${dir}/<YEAR>[-]<MONTH>
        A monthly backup directory.
    ${dir}/<YEAR>[-]W<WEEK>
        A weekly backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>
        A daily backup directory.
    ${dir}/<YEAR>[-]W<WEEK>[-]<DAY>
        A daily backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>T<HOUR>
        An hourly backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>T<HOUR>[:]<MINUTE>
        A minutely backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>T<HOUR>[:]<MINUTE>[:]<SECOND>
        A secondly backup directory.
    ${dir}/latest
        A symbolic link to the latest backup directory.
    ${dir}/conf/create-config
        An optional configuration file \
used by ${basename%backup*}backup-create-rsync(1) \
containing long option names (without leading slashes) and \
optional option arguments \
to be passed to rsync(1) \
when creating a new backup directory.
    ${dir}/conf/rsh
        An optional script \
to be used as a remote shell instead of the plain ssh(1). \
This script can be used for setting identity files and proxy commands, \
for instance.
    ${dir}/conf/rsync-config
        An optional configuration file \
used by ${basename%backup*}backup-rsync(1) \
used by ${basename%backup*}backup-copy-rsync(1) and ${basename%backup*}backup-create-rsync(1) \
used by ${basename%backup*}backup-copy(1) and ${basename}(1) \
containing long option names (without leading slashes) and \
optional option arguments \
to be passed to rsync(1).
    ${dir}/conf/tag-formats
        An optional configuration file \
containing date formats \
to be used \
when constructing a backup directory name for a new backup. \
Empty lines and comment lines (starting with a "#") are allowed, too. \
Each date format is tried in turn in order specified \
until a non-existing backup directory is found.
    ${dir}/tmp/
        A temporary directory to be used for creating a new backup directory.
    ${dir}/tools/${basename%backup*}backup-rsync
        Used for copying files using rsync(1).
    $( command -v -- rsync )
        A fast and extraordinarily versatile file copying tool. \
See also rsync(1).
    $( command -v -- ssh )
        A remote login program. \
See also ssh(1).
    <SOURCE-DIRECTORY>/.backup-filter
        An optional per-directory rsync(1) filter merge-file \
which can be used for excluding files from backups. \
Empty lines and comment lines (starting with a "#") are allowed, too.
__HELP__
		;;
	--help=help2man )
		COLUMNS=2500 exec "${0}" --help \
		| exec sed \
			-e '/^    [^ ]/!b'	\
			-e '/[^ ]  /b'		\
			-e 'N'			\
			-e 's/\n        -/  ​-/'	\
			-e 's/\n        /  /'	\
			-e 'P'			\
			-e 'D'
		exit
		;;
	--help=man )
		exec "${0}" --help=troff \
		| exec man -l -- -
		exit
		;;
	--help=troff )
		exec help2man -h --help=help2man -L en_US.UTF-8 -N -n "${short_description}" -- "${0}" \
		| exec sed -e 's/\([[:alnum:]\\-][[:alnum:]\\-]*\)[(]\([[:digit:]]*\)[)]/\\fB\1\\fR(\2)/g'
		exit
		;;
	--version | -V )
		exec sed -n \
			-e '/^[^#]/q'				\
			-e "3s/^# [^ ]* /# ${basename} /"	\
			-e 's/^#\( \(.*\)\)*$/\2/p'		\
			-e '/^##/{2!q;}'			\
			-- "${me}"
		;;
	esac
	break
done

# Parse an internal configuration name option.
unset config_name
case ${1-} in
--backup-config-name=* ) config_name=${1#*=}; shift ;;
esac

# Construct a tag name.
case ${1-} in
--backup-tag-name=* )
	tag=${1#*=} tmp_tag=${1#*=}
	shift
	;;
* )
	file=${dir}/conf/tag-formats
	unset formats tag
	[ ! -f "${file}" ] || formats=$(
		exec sed -n -e '/^[[:space:]]*[^[:space:]#]/p' -- "${file}"
		)
	while read format
	do
		tag2=$( date +"${format}" )
		case ${tag2} in
		*[![:digit:][:punct:]TW]* ) continue ;;
		[[:digit:]]*              ) ;;
		*                         ) continue ;;
		esac
		[ ! -e "${dir}/${tag2}" ] && {
			tag=${tag2} tmp_tag=latest
			break
		}
	done << __FORMATS__
${formats-"\
%Y
%Y%m
%GW%V
%Y%m%d
%Y%m%dT%H
%Y%m%dT%H%M
%Y%m%dT%H%M%S"}
__FORMATS__
	;;
esac
: "${tag:?}"

# Determine the preferred remove method.
fstype=$( exec find "${dir}/." -prune -printf '%F\n' ) && :
case ${fstype} in
fuse.s3ql ) rm_fr=s3qlrm ;;
*         ) rm_fr='rm -fr' ;;
esac

# Prepare to create a protected temporary directory.
mkdir -m go=u-w -p -- \
	"${dir}/tmp" \
	"${dir}/tmp/create-${tmp_tag}-${$}" \
	"${dir}/tmp/old-create-${tmp_tag}-${$}" \
	"${dir}/tmp/old-create-${tmp_tag}-${$}/empty"
${rm_fr} -- "${dir}/tmp/old-create-${tmp_tag}-${$}"/*
mv -f -- \
	"${dir}/tmp/create-${tmp_tag}"-* \
	"${dir}/tmp/old-create-${tmp_tag}-${$}/"
${rm_fr} -- "${dir}/tmp/old-create-${tmp_tag}"-*

# Create a protected temporary directory.
mkdir -m go= -- "${dir}/tmp/create-${tmp_tag}-${$}"

# Create a new backup directory in a protected temporary directory.
dest_opt=--link-dest
if
	case ${fstype} in
	btrfs     ) cp_a='cp --archive --reflink=always' ;;
	fuse.s3ql ) cp_a=s3qlcp ;;
	*         ) false ;;
	esac
then
	[ ! -d "${dir}/latest/." ] || ${cp_a} -- \
		"${dir}/latest/."		\
		"${dir}/tmp/create-${tmp_tag}-${$}/${tag}"
	set -- --delete --delete-delay --delete-excluded "${@}"
	dest_opt=--copy-dest
fi
dest_opts=$(
	exec ls -t -- "${dir}/" \
	| exec sed -n -e '/./s|^[[:digit:]][[:digit:][:punct:]TW]*$|'"${dest_opt}"'=../../../&|p' \
	| exec sed -e '20q'
	)
"${0%backup*}backup-create-rsync" \
	${config_name+ --backup-config-name="${config_name}" } \
	${dest_opts} \
	"${@}" \
	"${dir}/tmp/create-${tmp_tag}-${$}/${tag}" ||
case ${?} in
24 ) ;; # Partial transfer due to vanished source files
*  ) exit 1 ;;
esac
chmod -- g=u-w,o= "${dir}/tmp/create-${tmp_tag}-${$}/${tag}"
chgrp -- users    "${dir}/tmp/create-${tmp_tag}-${$}/${tag}"
case ${fstype} in
fuse.s3ql ) s3qllock -- "${dir}/tmp/create-${tmp_tag}-${$}/${tag}" ;;
esac

# Release the newly created backup directory.
ln    -s -- "${tag}" "${dir}/tmp/create-${tmp_tag}-${$}/latest"
sync
mv    -f -- "${dir}/tmp/create-${tmp_tag}-${$}"/* "${dir}/"
rmdir    -- "${dir}/tmp/create-${tmp_tag}-${$}"
sync
