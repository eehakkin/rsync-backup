#! /bin/sh -Ce
# -*- sh -*-
###########################################################################
# backup_ages 0.0.20211113
#
# Copyright (C) 2019-2021 Eero H채kkinen <Eero+rsync-backup@H채kkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################

: << '=cut'
=encoding UTF-8

=head1 NAME

backup_ages - Munin plugin to monitor backup ages

=head1 APPLICABLE SYSTEMS

All rsync backup hosts.

=head1 CONFIGURATION

This plugin must have access to backups.

=head2 CONFIGURATION EXAMPLE

 [backup_ages]
  group	backup, users

=head2 NAME AND LABEL SETTINGS

The default behaviour is to report backup ages for the current
backup directory and for all of its sibling directories
which contain
a conf/backup-src-list configuration file and
a tools/backup tool.
That behaviour can be overridden with the names variable
which may contain
names of the sibling directories and
paths of arbitrary directories.
The default label for each field is
the directory basename for the sibling directories and
the directory pathname for arbitrary directories
but that can be overridden with a field specific _label variable.

 [backup_ages]
  env.names localhost devel.example.org mostly-offline.example.org /path/to/dir
  env.devel_example_org_label Devel
  env._path_to_dir_label Directory
  env.mostly_offline_example_org_label Mostly offline


=head2 WARNING AND CRITICAL SETTINGS

The default behaviour is to detect backup frequency
from the number for hourly backups.
The backup frequency is assumed to be
one day if there are no hourly backups in addition to daily backups,
12 hours if there is 1 hourly backup,
8 hours if there are 2 hourly backups,
6 hours if there are 3 hourly backups,
4 hours if there are 4 or 5 hourly backups,
3 hours if there are 6 or 7 hourly backups,
2 hours if there are 8 to 11 hourly backups and
1 hour if there are at least 12 hourly backups.

The default warning threshold is 1.5 times the assumed backup frequency
(36 hours or 1d12h in the case of daily backups,
3 hours in the case of bi-hourly backups and
1.5 hours in the case of hourly backups)
indicating a delayed backup and
the default critical threshold is 2.5 times the assumed backup frequency
(60 hours or 2d12h in the case of daily backups,
5 hours in the case of bi-hourly backups and
2.5 hours in the case of hourly backups)
indicating a missing backup.

 [backup_ages]
  env.critical 60
  env.warning 36
  env.devel_example_org_critical 6.5
  env.devel_example_org_warning 3.5
  env._path_to_dir_critical 4.5
  env._path_to_dir_warning 2.5
  env.mostly_offline_example_org_critical 15
  env.mostly_offline_example_org_warning 8

It is also possible to use time units (w for weeks, d for days, h for hours,
min and m for minutes and s for seconds):

 [backup_ages]
  env.critical 2d12h
  env.warning 1d12h
  env.devel_example_org_critical 6h30min
  env.devel_example_org_warning 3h30min
  env._path_to_dir_critical 4h30min
  env._path_to_dir_warning 2h30min
  env.mostly_offline_example_org_critical 2w1d
  env.mostly_offline_example_org_warning 1w1d

=head1 USAGE

Link this plugin in /etc/munin/plugins/ and restart the munin-node.

=head1 AUTHOR

Eero H채kkinen <Eero+rsync-backup@H채kkinen.fi>

=head1 LICENSE

GPLv3

=cut

case ${1-} in
-h | --help ) exec perldoc "${0}" ;;
esac

# Locate the script.
me=$( command -v -- "${0}" || ls -d -- "${0}" )
me=$( readlink -f -- "${me}" || ls -d -- "${me}" )
me_dir=$( dirname -- "${me}" )
dir=$( cd -- "${me_dir}/../.." && pwd )

. "${MUNIN_LIBDIR?}/plugins/plugin.sh"

microseconds_to_hours() { # <ARITHMETIC-EXPRESSION>
	microseconds=$(( ${*} )) &&
	microhours=$(( ${microseconds} / ( 60 * 60 ) )) &&
	case ${microhours} in
	?      ) hours=0.00000${microhours} ;;
	??     ) hours=0.0000${microhours} ;;
	???    ) hours=0.000${microhours} ;;
	????   ) hours=0.00${microhours} ;;
	?????  ) hours=0.0${microhours} ;;
	?????? ) hours=0.${microhours} ;;
	*      ) hours=${microhours%??????}.${microhours#"${microhours%??????}"} ;;
	esac &&
	case ${hours} in
	*.000000 ) hours=${hours%.000000}.0 ;;
	*.*[!0]* ) hours=${hours%"${hours##*.*[!0]}"} ;;
	esac &&
	echo "${hours}"
}

normalize_backup_name() {
	case ${backup_name} in
	"${dir}"/../*/tools/backup )
		backup_dir=${backup_name%/tools/backup}
		backup_name=${backup_dir#"${dir}"/../}
		if
			[ -h "${backup_dir}" ] ||
			[ ! -s "${backup_dir}/conf/backup-src-list" ]
		then
			unset backup_dir backup_name
		fi
		;;
	*[\\/]* )
		backup_dir=${backup_name}
		;;
	* )
		backup_dir=${dir}/../${backup_name}
		;;
	esac
}

print_threshold() { # <THRESHOLD-TYPE> <FIELDNAME>
	threshold=$( "get_${1}" "${2}" )
	case ${threshold} in
	'' ) return ;;
	esac
	# Convert from
	#     <VALUE-1><UNIT-1>[<VALUE-2><UNIT-2>[<VALUE-3><UNIT-3>[...]]]
	# to
	#     <VALUE><UNIT>.
	while :
	do
		# Convert from
		#     <VALUE-1><UNIT-1><VALUE-3><UNIT-3>[<VALUE-4><UNIT-4>[...]]
		# to
		#     <VALUE><UNIT-2><VALUE-3><UNIT-3>[<VALUE-4><UNIT-4>[...]]
		# and from
		#     <VALUE-1><UNIT-1><VALUE-2><UNIT-2>[<VALUE-3><UNIT-3>[...]]
		# to
		#     <VALUE><UNIT-2>[<VALUE-3><UNIT-3>[...]].
		case ${threshold} in
		*w[[:digit:]]*[dhms]* ) multiplier=7  unit1=w   unit2=d ;;
		*d[[:digit:]]*[hms]*  ) multiplier=24 unit1=d   unit2=h ;;
		*h[[:digit:]]*[ms]*   ) multiplier=60 unit1=h   unit2=min ;;
		*min[[:digit:]]*s     ) multiplier=60 unit1=min unit2=s ;;
		*m[[:digit:]]*s       ) multiplier=60 unit1=m   unit2=s ;;
		*                     ) break ;;
		esac
		value1=${threshold%%"${unit1}"*}
		threshold=${threshold#"${value1}${unit1}"}
		value2=${threshold%%[![:digit:]]*}
		case ${threshold} in
		"${value2}${unit2}"* ) threshold=$((
			${multiplier} * ( ${value1} ) + ( ${value2} )
			))${unit2}${threshold#"${value2}${unit2}"} ;;
		"${value2}${unit2%in}"* ) threshold=$((
			${multiplier} * ( ${value1} ) + ( ${value2} )
			))${unit2}${threshold#"${value2}${unit2%in}"} ;;
		* ) threshold=$((
			${multiplier} * ( ${value1} )
			))${unit2}${threshold} ;;
		esac
	done
	# Convert from <VALUE><UNIT> to <VALUE-IN-HOURS>.
	case ${threshold##*[[:digit:]]} in
	s   ) threshold=$( seconds_to_hours        "${threshold%s}"     ) ;;
	min ) threshold=$( seconds_to_hours "60 * ( ${threshold%min} )" ) ;;
	m   ) threshold=$( seconds_to_hours "60 * ( ${threshold%m}   )" ) ;;
	h   ) threshold=${threshold%h}.0 ;;
	d   ) threshold=$((     24 * ${threshold%d} )).0 ;;
	w   ) threshold=$(( 7 * 24 * ${threshold%w} )).0 ;;
	esac
	echo "${2}.${1} ${threshold}"
}

seconds_to_hours() { # <ARITHMETIC-EXPRESSION>
	seconds=$(( ${*} )) &&
	microseconds_to_hours "1000000 * ( ${seconds} )"
}

case ${1-} in
autoconf )
	autoconf=no
	for backup_name in ${names- "${dir}"/../*/tools/backup }
	do
		normalize_backup_name
		${backup_dir+:} ${backup_name+:} continue
		autoconf=yes
		break
	done
	echo "${autoconf}"
	;;
config )
	echo 'graph_title Backup ages'
	echo 'graph_info This graph shows how old the active backups are'
	echo 'graph_category disk'
	echo 'graph_args --base 1000 --lower-limit 0'
	echo 'graph_vlabel Age in hours'
	for backup_name in ${names- "${dir}"/../*/tools/backup }
	do
		normalize_backup_name
		${backup_dir+:} ${backup_name+:} continue
		case $(
			exec find \
				"${backup_dir}/." \
				! -name . \
				-prune \
				-name '*T??' \
			| exec wc -l
			) in
		0  ) critical=60  warning=36 ;;  # Daily backups
		1  ) critical=30  warning=18 ;;  # Every 12 hours
		2  ) critical=20  warning=12 ;;  # Every 8 hours
		3  ) critical=15  warning=9 ;;   # Every 6 hours
		4  | \
		5  ) critical=10  warning=6 ;;   # Every 4 hours
		6  | \
		7  ) critical=7.5 warning=4.5 ;; # Every 3 hours
		8  | \
		9  | \
		10 | \
		11 ) critical=5   warning=3 ;;   # Every 2 hours
		*  ) critical=2.5 warning=1.5 ;; # Hourly backups
		esac
		fieldname=$( clean_fieldname "${backup_name}" )
		eval echo "\"\${fieldname}.label \${${fieldname}_label-${backup_name}}\""
		print_threshold critical "${fieldname}"
		print_threshold warning  "${fieldname}"
	done
	;;
* )
	now=$( date +%s )
	for backup_name in ${names- "${dir}"/../*/tools/backup }
	do
		normalize_backup_name
		${backup_dir+:} ${backup_name+:} continue
		fieldname=$( clean_fieldname "${backup_name}" )
		ctime=$( stat --format=%Z -- "${backup_dir}/latest/." ) &&
		age_in_hours=$( seconds_to_hours ${now} - ${ctime} ) ||
		age_in_hours=U
		echo "${fieldname}.value ${age_in_hours}"
	done
	;;
esac
