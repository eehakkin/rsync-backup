#! /bin/sh -Ceu
###########################################################################
# backup-rsync 0.0.20211029
#
# Copyright (C) 2010-2021 Eero Häkkinen <Eero+rsync-backup@Häkkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
# Try to be nice.
{
	ionice -c 3  -p "${$}"
	renice -n 99 -p "${$}"
} > /dev/null 2>&1 || :

# Locate the script.
me=$( command -v -- "${0}" || ls -d -- "${0}" )
me_dir=$( dirname -- "${me}" )
case ${me_dir} in
. ) dir=.. ;;
* ) dir=$( dirname -- "${me_dir}" ) ;;
esac

basename=${0##*[\\/]}
short_description='a backup-oriented file-copying tool'
valid=[:alnum:]_.-


# Parse options.
while :
do
	case ${1-} in
	--help | -h ) exec fmt -s -w "${COLUMNS:-$( tput cols )}" << __HELP__
Usage: ${basename} [<RSYNC-OPTION>]... <SRC>... [<DEST>]
 or:   ${basename} [<RSYNC-OPTION>]... [<USER>@]<HOST>:<SRC>... <DEST>
 or:   ${basename} [<RSYNC-OPTION>]... [<USER>@]<HOST>::<SRC>... <DEST>
 or:   ${basename} [<RSYNC-OPTION>]... rsync://[<USER>@]<HOST>[:<PORT>]/<SRC>... <DEST>
 or:   ${basename} <OPTION>...
 or:   ${basename} [--backup-prepare] --server --sender [<RSYNC-SENDER-OPTION>]... . [<ARG>]...

Copy files using rsync(1).

Options:
    -h, --help[=<FORMAT>]
        Show this help message and exit.
    -V, --version
        Show version information and exit.
    --backup-prepare
        Run ${basename%backup-*}backup-prepare(1) before sending files.

Rsync options:
$( exec rsync --help | exec sed '
	/^ *-/,/^$/!d
	/ --help/d
	/ --version/d
	/./!d
	s/^ */        /
	s/,-/, -/g
	/^ *-/{
		s//    -/
		s/\([^, ]\) /\1\
/
	}
	P
	D
' )

Operands:
    <SRC>
        A local source to be copied.
    [<USER>@]<HOST>:<SRC>
        A remote shell source to be copied.
    [<USER>@]<HOST>::<SRC>
        A rsync daemon source to be copied.
    rsync://[<USER>@]<HOST>[:<PORT>]/<SRC>
        A rsync daemon source to be copied.
    <DEST>
        A destination.

Files:
    ${dir}/conf/pre.d/
        An optional directory \
used by ${basename%backup*}backup-prepare(1) \
containing scripts \
which are executed in lexical order of names \
when preparing for backups. \
The names of the files must consist of only characters \
matching the pattern [${valid}].
    ${dir}/conf/rsh
        An optional script \
to be used as a remote shell instead of the plain ssh(1). \
This script can be used for setting identity files and proxy commands, \
for instance.
    ${dir}/conf/rsync-config
        An optional configuration file \
containing long option names (without leading slashes) and \
optional option arguments \
to be passed to rsync(1).
    ${dir}/tools/${basename%backup*}backup-prepare
        Used for preparing for backups by executing preparation scripts.
    $( command -v -- rsync )
        A fast and extraordinarily versatile file copying tool. \
See also rsync(1).
    $( command -v -- ssh )
        A remote login program. \
See also ssh(1).
    <SOURCE-DIRECTORY>/.backup-filter
        An optional per-directory rsync(1) filter merge-file \
which can be used for excluding files from backups. \
Empty lines and comment lines (starting with a "#") are allowed, too.
__HELP__
		;;
	--help=help2man )
		COLUMNS=2500 exec "${0}" --help \
		| exec sed \
			-e '/^    [^ ]/!b'	\
			-e '/[^ ]  /b'		\
			-e 'N'			\
			-e 's/\n        /  /'	\
			-e 'P'			\
			-e 'D'
		exit
		;;
	--help=man )
		exec "${0}" --help=troff \
		| exec man -l -- -
		exit
		;;
	--help=troff )
		exec help2man -h --help=help2man -L en_US.UTF-8 -N -n "${short_description}" -- "${0}" \
		| exec sed -e 's/\([[:alnum:]\\-][[:alnum:]\\-]*\)[(]\([[:digit:]]*\)[)]/\\fB\1\\fR(\2)/g'
		exit
		;;
	--version | -V )
		exec sed -n \
			-e '/^[^#]/q'				\
			-e "3s/^# [^ ]* /# ${basename} /"	\
			-e 's/^#\( \(.*\)\)*$/\2/p'		\
			-e '/^##/{2!q;}'			\
			-- "${me}"
		;;
	esac
	break
done

# Prepare to parse server options.
args= backup_args= backup_prepare= extra_args=
for arg
do
	case "${args} ${arg}" in
	' --backup-prepare' ) backup_prepare=+ backup_args="${backup_args} ${arg}" ;;
	*                   ) args="${args} ${arg}" ;;
	esac
done

# Parse SSH_ORIGINAL_COMMAND.
case ${SSH_ORIGINAL_COMMAND++} in
+ )
	# Check if SSH_ORIGINAL_COMMAND matches the supplied arguments and
	# extend the options and the operands with ones from
	# SSH_ORIGINAL_COMMAND.
	case ${SSH_ORIGINAL_COMMAND} in
	*"${0}${backup_args}${args}" | \
	*"${0}${args}"               ) ;;
	*"${0}${backup_args}${args} "* )
		extra_args=" ${SSH_ORIGINAL_COMMAND#**"${0}${backup_args}${args} "}"
		;;
	*"${0}${args} "* )
		extra_args=" ${SSH_ORIGINAL_COMMAND#**"${0}${args} "}"
		;;
	* ) false ;;
	esac &&
	case ${args} in
	' --server --sender -s'*          | \
	' --server --sender -'[!s]*' . '* )
		# Require exact argument match.
		[ -z "${extra_args}" ]
		;;
	' --server --sender -'[!s]*' .' )
		# Allow extra operands but not extra options.
		(
			for arg in ${extra_args}
			do
				case ${arg} in
				( -* ) exit 1 ;;
				esac
			done
		)
		;;
	' --server --sender' )
		# Allow extra options and operands.
		;;
	* )
		# Allow extra options and operands.
		case ${backup_args}${args}${extra_args} in
		' --backup-prepare --server --sender '* | \
		' --server --sender '*                  ) ;;
		* ) false ;;
		esac
		;;
	esac &&
	set -- "${@}" ${extra_args} &&
	case ${SSH_ORIGINAL_COMMAND} in
	*"${0}${backup_args}${args}${extra_args}" ) ;;
	*"${0}${args}${extra_args}" ) backup_prepare= ;;
	* ) false ;;
	esac || {
		printf "%s: SSH_ORIGINAL_COMMAND='%s' does not match '%s'\n" \
			"${basename}" \
			"${SSH_ORIGINAL_COMMAND}" \
			"${0}${args}" >&2
		exit 1
	}
	;;
esac

# Parse server options.
case ${args}${extra_args} in
' --server --sender '* )
	case ${backup_prepare} in
	+ ) "${0%backup*}backup-prepare" || : ;;
	esac
	for arg in ${backup_args}
	do
		shift
	done
	exec "${0%backup*}backup-nice" -- rsync "${@}"
	;;
esac

# Parse an internal configuration name option.
unset config_name
case ${1-} in
--backup-config-name=* ) config_name=${1#*=}; shift ;;
esac

# Construct default option arguments.
case ${config_name-rsync} in
create ) filter='dir-merge /.backup-filter' ;;
*      ) unset filter ;;
esac
rsh=${dir}/conf/rsh; [ ! -x "${rsh}" ] && unset rsh
rsync_path="\
IONICE=\$( command -v -- ionice || : ) && \
NICE=\$( command -v -- nice || : ) && \
NOCACHE=\$( command -v -- nocache || : ) && \
exec \
\${IONICE:+ \"\${IONICE}\" -c 3 -- } \
\${NICE:+ \"\${NICE}\" -n 99 -- } \
\${NOCACHE:+ \"\${NOCACHE}\" -n 2 -- } \
rsync"

# Extend the options with ones read from configuration files.
for config_name in ${config_name+ "${config_name}" } rsync
do
	[ ! -f "${dir}/conf/${config_name}-config" ] || {
		for arg
		do
			while IFS="${IFS}=" read opt optarg
			do
				case ${opt} in
				'' | '#'*  ) continue ;;
				filter     ) unset filter ;;
				rsh        ) unset rsh ;;
				rsync-path ) unset rsync_path ;;
				esac
				set -- "${@}" "--${opt}${optarg:+=${optarg}}"
			done
			set -- "${@}" "${arg}"
			shift
		done < "${dir}/conf/${config_name}-config"
	}
done

# Execute.
exec "${0%backup*}backup-nice" -- rsync \
	--archive					\
	${filter+ --filter="${filter}" }		\
	--fuzzy						\
	--relative					\
	${rsh+ --rsh="${rsh}" }				\
	${rsync_path+ --rsync-path="${rsync_path}" }	\
	--sparse					\
	"${@}"
