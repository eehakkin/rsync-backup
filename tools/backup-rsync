#! /bin/sh -Ceu
# backup-rsync - a backup-oriented file-copying tool
###########################################################################
# backup-rsync 0.0.20220904
#
# Copyright (C) 2010-2022 Eero Häkkinen <Eero+rsync-backup@Häkkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
# Try to be nice.
{
	ionice -c 3  -p "${$}"
	renice -n 99 -p "${$}"
} > /dev/null 2>&1 || :

# Locate the script.
me=$( command -v -- "${0}" || ls -d -- "${0}" )
me_base=$( basename -- "${me}" )
me_dir=$( dirname -- "${me}" )
case ${me_dir} in
.  ) dir=.. ;;
.. ) dir=../.. ;;
*. ) dir=$( cd -- "${me_dir}/.." && pwd ) ;;
*  ) dir=$( dirname -- "${me_dir}" ) ;;
esac

valid='[:alnum:]_.-'


# Parse options.
while :
do
	case ${1-} in
	--help | -h )
		COLUMNS=${COLUMNS:-$( tput cols 2> /dev/null || : )}
		exec fmt -s ${COLUMNS:+ -w "${COLUMNS}" } << __HELP__ \
		| exec sed -e '/\\$/{N;s/\\\n  *//;}'; exit
Usage: \\
           ${me_base} [<RSYNC-OPTION>]... <SRC>... [<DEST>]
 or:   \\
           ${me_base} [<RSYNC-OPTION>]... [<USER>@]<HOST>:<SRC>... [<DEST>]
 or:   \\
           ${me_base} [<RSYNC-OPTION>]... [<USER>@]<HOST>::<MODULE>[/[<SRC>]]... [<DEST>]
 or:   \\
           ${me_base} [<RSYNC-OPTION>]... rsync://[<USER>@]<HOST>[:<PORT>]/<MODULE>[/[<SRC>]]... [<DEST>]
 or:   \\
           ${me_base} <OPTION>...
 or:   \\
           ${me_base} [--backup-prepare] --server --sender [<RSYNC-SENDER-OPTION>]... . [<ARG>]...
 or:   \\
           ${me_base} --server [<RSYNC-RECEIVER-OPTION>]... . [<ARG>]...

Copy files \
using rsync(1) \
with backup related options.

Copying is done \
with idle I/O priority (whose impact on normal system activity should be zero), \
with an adjusted niceness (which affect process scheduling) and \
with minimized effect on file system cache \
provided that the commands ionice(1), nice(1) and nocache(1) are available. \
For details, see \
${me_base%backup*}backup-nice(1).

Options:
    -h, --help[=<FORMAT>]
        Show this help message and exit.
    -V, --version
        Show version information and exit.
    --backup-prepare
        Run ${me_base%backup-*}backup-prepare(1) before sending files.

Rsync options:
$( exec rsync --help | exec sed '
	/^ *-/,/^$/!d
	/^ *--help/d
	/^ *--version/d
	/./!d
	s/^ */        /
	s/,-/, -/g
	/^ *-/{
		s//    -/
		s/\([^, ]\)  */'"\1\\
        "'/
	}
' )

Operands:
    <SRC>
        A local source to be copied.
    [<USER>@]<HOST>:<SRC>
        A remote shell source to be copied.
    [<USER>@]<HOST>::<MODULE>[/[<SRC>]]
        An rsync daemon source to be copied.
    rsync://[<USER>@]<HOST>[:<PORT>]/<MODULE>[/[<SRC>]]
        An rsync daemon source to be copied.
    <DEST>
        A destination.

Files:
    ${dir}/conf/pre.d/
        An optional directory \
used by ${me_base%backup*}backup-prepare(1) \
containing scripts \
which are executed in lexical order of names \
when preparing for backups. \
The names of the files must consist of only characters \
matching the pattern [${valid}].
    ${dir}/conf/rsh
        An optional script \
to be used as a remote shell instead of the plain ssh(1). \
This script can be used for setting identity files and proxy commands, \
for instance.
    ${dir}/conf/rsync-config
        An optional configuration file \
containing long option names (without leading slashes) and \
optional option arguments \
to be passed to rsync(1).
    ${dir}/tools/${me_base%backup*}backup-prepare
        Used for preparing for backups by executing preparation scripts.
    <SOURCE-DIRECTORY>/.backup-filter
        An optional per-directory rsync(1) filter merge-file \
which can be used for excluding files from backups. \
Empty lines and comment lines (starting with a "#") are allowed, too.

See also:
    ${me_base%backup*}backup-clean-tmp(1),
    ${me_base%backup*}backup-copy-rsync(1),
    ${me_base%backup*}backup-create-rsync(1),
    ${me_base%backup*}backup-help(1),
    ${me_base%backup*}backup-make-tag(1),
    ${me_base%backup*}backup-nice(1),
    ${me_base%backup*}backup-prepare(1)

    ionice(1),
    nice(1),
    nocache(1)
    rsync(1),
    ssh(1)

    Home page <https://github.Eero.Häkkinen.fi/rsync-backup/>
__HELP__
		;;
	--help=* | --version | -V )
		export BACKUP_TOOL="${0}"
		exec "${0%backup*}backup-help" "${1}"
		;;
	esac
	break
done

# Prepare to parse server options.
args='' backup_args='' backup_prepare='' extra_args=''
for arg
do
	case "${args} ${arg}" in
	' --backup-prepare' ) backup_prepare=+ backup_args="${backup_args} ${arg}" ;;
	*                   ) args="${args} ${arg}" ;;
	esac
done

# Parse SSH_ORIGINAL_COMMAND.
case ${SSH_ORIGINAL_COMMAND++} in
+ )
	# Check if SSH_ORIGINAL_COMMAND matches the supplied arguments and
	# extend the options and the operands with ones from
	# SSH_ORIGINAL_COMMAND.
	{
		# shellcheck disable=SC2086
		case ${SSH_ORIGINAL_COMMAND} in
		*"${0}${backup_args}${args}" | \
		*"${0}${args}"               ) ;;
		*"${0}${backup_args}${args} "* )
			extra_args=" ${SSH_ORIGINAL_COMMAND#**"${0}${backup_args}${args} "}"
			;;
		*"${0}${args} "* )
			extra_args=" ${SSH_ORIGINAL_COMMAND#**"${0}${args} "}"
			;;
		* ) false ;;
		esac &&
		case ${args} in
		' --server --sender -s'*           | \
		' --server --sender -'[!-s]*' . '* | \
		' --server -s'*                    | \
		' --server -'[!-s]*' . '*          )
			# Require exact argument match.
			[ -z "${extra_args}" ]
			;;
		' --server --sender -'[!-s]*' .' | \
		' --server -'[!-s]*' .'          )
			# Allow extra operands but not extra options.
			(
				for arg in ${extra_args}
				do
					case ${arg} in
					( -* ) exit 1 ;;
					esac
				done
			)
			;;
		' --server --sender' | \
		' --server'          )
			# Allow extra options and operands.
			;;
		* )
			# Allow extra options and operands.
			case ${backup_args}${args}${extra_args} in
			' --backup-prepare --server --sender '* | \
			' --server --sender '*                  | \
			' --server '*                           ) ;;
			* ) false ;;
			esac
			;;
		esac &&
		set -- "${@}" ${extra_args} &&
		case ${SSH_ORIGINAL_COMMAND} in
		*"${0}${backup_args}${args}${extra_args}" ) ;;
		*"${0}${args}${extra_args}" ) backup_prepare= ;;
		* ) false ;;
		esac
	} || {
		printf "%s: SSH_ORIGINAL_COMMAND='%s' does not match '%s'\n" \
			"${me_base}" \
			"${SSH_ORIGINAL_COMMAND}" \
			"${0}${args}" >&2
		exit 1
	}
	;;
esac

# Parse options.
max_dest_opts=20
unset tag tmp_base
case ${args}${extra_args} in
' --server --sender '* | \
' --server --sender'   )
	case ${backup_prepare} in
	+ ) "${0%backup*}backup-prepare" || : ;;
	esac
	for arg in ${backup_args}
	do
		shift
	done
	;;
' --server '* | \
' --server'   )
	eval 'last_arg=${'"${#}"'}'
	case ${last_arg} in
	. )
		# shellcheck disable=SC2004
		max_dest_opts=$(( ${max_dest_opts} / 2 ))
		# Replace the last operand with <DIR>/tmp/rsync-<PID>/<TAG>.
		tag=$( "${0%backup*}backup-make-tag" )
		tmp_base=rsync-${$}
		unset last_arg
		for arg
		do
			set -- "${@}" ${last_arg+"${last_arg}"} #"
			shift
			last_arg=${arg}
		done
		set -- "${@}" "${dir}/tmp/${tmp_base}/${tag}"
		;;
	esac
	;;
* )
	# Parse an internal configuration name option.
	unset config_name
	case ${1-} in
	--backup-config-name=* ) config_name=${1#*=}; shift ;;
	esac

	# Construct default option arguments.
	case ${config_name-rsync} in
	create ) filter='dir-merge /.backup-filter' ;;
	*      ) unset filter ;;
	esac
	rsh=${dir}/conf/rsh; [ ! -x "${rsh}" ] && unset rsh
	# shellcheck disable=SC2089
	rsync_path="\
IONICE=\$( command -v -- ionice || : ) && \
NICE=\$( command -v -- nice || : ) && \
NOCACHE=\$( command -v -- nocache || : ) && \
exec \
\${IONICE:+ \"\${IONICE}\" -c 3 -- } \
\${NICE:+ \"\${NICE}\" -n 99 -- } \
\${NOCACHE:+ \"\${NOCACHE}\" -n 2 -- } \
rsync"

	# Extend the options with ones read from configuration files.
	for config_name in ${config_name+ "${config_name}" } rsync #"
	do
		[ ! -f "${dir}/conf/${config_name}-config" ] || {
			for arg
			do
				while IFS="${IFS}=" read -r opt optarg
				do
					case ${opt} in
					'' | '#'*  ) continue ;;
					filter     ) unset filter ;;
					rsh        ) unset rsh ;;
					rsync-path ) unset rsync_path ;;
					esac
					set -- "${@}" "--${opt}${optarg:+=${optarg}}"
				done
				set -- "${@}" "${arg}"
				shift
			done < "${dir}/conf/${config_name}-config"
		}
	done

	# Extend the options with default options.
	# shellcheck disable=SC2090
	set -- \
		--archive					\
		${filter+ --filter="${filter}" }		\
		--fuzzy						\
		--fuzzy						\
		--relative					\
		${rsh+ --rsh="${rsh}" }				\
		${rsync_path+ --rsync-path="${rsync_path}" }	\
		--sparse					\
		"${@}"						#"

	# Check if the last operand is <DIR>/tmp/<BASE-PREFIX>-<PID>/<TAG>.
	eval 'last_arg=${'"${#}"'}'
	case ${last_arg#"${dir}/tmp/"} in
	"${last_arg}" | */*[]\(\)\*/\?\\[]* | */*[![:digit:][:punct:]TW]* ) ;;
	*-*/[[:digit:]]* )
		last_arg_dir=${last_arg%/*}
		tag=${last_arg##*/}
		tmp_base=${last_arg_dir##*/}
		;;
	esac
	;;
esac

case ${tmp_base++}${tag++} in
++ )
	# Clean up temporary directories.
	tmp_base_prefix=${tmp_base%-*}
	"${0%backup*}backup-clean-tmp" -- "${tmp_base_prefix}"

	# Create a protected temporary directory.
	mkdir -m go= -- "${dir}/tmp/${tmp_base}"

	# Prepare to minimise disk usage and to speed up the transfer.
	fstype=$(
		LC_ALL=C exec find \
			"${dir}/." \
			-prune \
			-printf '%F\n' \
			2> /dev/null
		) || :
	case ${fstype} in
	unknown ) fstype=$(
		LC_ALL=C exec df --output=fstype -- "${dir}/." 2> /dev/null
		) && fstype=${fstype##*"${IFS#??}"} || : ;;
	esac
	if
		! [ ! -d "${dir}/latest/." ] &&
		case ${fstype} in
		btrfs     | \
		xfs       ) cp_a='cp --archive --reflink=always' ;;
		fuse.s3ql ) cp_a=s3qlcp ;;
		*         ) false ;;
		esac
	then
		"${0%backup*}backup-nice" -- \
			${cp_a} -- \
				"${dir}/latest/." \
				"${dir}/tmp/${tmp_base}/${tag}"
		set -- --delete --delete-delay --delete-excluded "${@}"
		: > "${dir}/tmp/${tmp_base}/${tag}/.delete-this-file"
	fi
	dest_opts=$(
		exec ls -t -- "${dir}/" \
		| exec sed -n \
			-e '\|[]()*/?\\[]|d' \
			-e 's|^[[:digit:]][[:digit:][:punct:]TW]*$|--link-dest=../../../&|p' \
		| exec sed -e "${max_dest_opts}q"
		)

	# Run rsync.
	# shellcheck disable=SC2086
	"${0%backup*}backup-nice" -- rsync ${dest_opts} "${@}" ||
	case ${?} in
	24 ) ;; # Partial transfer due to vanished source files
	*  ) exit 1 ;;
	esac

	# Release the newly created backup directory.
	if [ ! -d "${dir}/tmp/${tmp_base}/${tag}" ]
	then
		# Dry run.
		:
	elif [ -f "${dir}/tmp/${tmp_base}/${tag}/.delete-this-file" ]
	then
		# Dry run.
		case ${fstype} in
		fuse.s3ql ) s3qlrm -- "${dir}/tmp/${tmp_base}/${tag}" ;;
		*         ) rm -fr -- "${dir}/tmp/${tmp_base}/${tag}" ;;
		esac
	else
		chmod -- g=u-w,o= "${dir}/tmp/${tmp_base}/${tag}"
		chgrp -- users    "${dir}/tmp/${tmp_base}/${tag}"
		case ${fstype} in
		btrfs | \
		xfs   )
			if
				! [ ! -d "${dir}/latest" ] &&
				command -v -- duperemove > /dev/null
			then
				"${0%backup*}backup-nice" -- \
					duperemove -dqr -- \
						"${dir}/latest/." \
						"${dir}/tmp/${tmp_base}/${tag}"
			fi
			;;
		fuse.s3ql )
			s3qllock -- "${dir}/tmp/${tmp_base}/${tag}"
			;;
		esac
		ln -s -- "${tag}" "${dir}/tmp/${tmp_base}/latest"
		sync
		mv -f -- "${dir}/tmp/${tmp_base}"/* "${dir}/"
		sync
	fi

	# Remove the protected temporary directory.
	rmdir -- "${dir}/tmp/${tmp_base}"
	;;
* )
	# Run rsync.
	exec "${0%backup*}backup-nice" -- rsync "${@}"
	;;
esac
