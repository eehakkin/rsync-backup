#! /bin/sh -Ceu
###########################################################################
# backup-copy 0.0.20211113
#
# Copyright (C) 2010-2021 Eero Häkkinen <Eero+rsync-backup@Häkkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
# Try to be nice.
{
	ionice -c 3  -p "${$}"
	renice -n 99 -p "${$}"
} > /dev/null 2>&1 || :

# Locate the script.
me=$( command -v -- "${0}" || ls -d -- "${0}" )
me_dir=$( dirname -- "${me}" )
case ${me_dir} in
.  ) dir=.. ;;
.. ) dir=../.. ;;
*. ) dir=$( cd -- "${me_dir}/.." && pwd ) ;;
*  ) dir=$( dirname -- "${me_dir}" ) ;;
esac

basename=${0##*[\\/]}
short_description='copy backup directories'



# Parse options.
while :
do
	case ${1-} in
	--help | -h )
		COLUMNS=${COLUMNS:-$( tput cols 2> /dev/null || : )}
		exec fmt -s ${COLUMNS:+ -w "${COLUMNS}" } << __HELP__ \
		| exec sed -e '/\\$/{N;s/\\\n  *//;}'; exit
Usage: \\
           ${basename} [<RSYNC-OPTION>]... <SRC>[/[.]]...
 or:   \\
           ${basename} [<RSYNC-OPTION>]... [<USER>@]<HOST>:<SRC>[/[.]]...
 or:   \\
           ${basename} [<RSYNC-OPTION>]... [<USER>@]<HOST>::<MODULE>[/<SRC>][/[.]]...
 or:   \\
           ${basename} [<RSYNC-OPTION>]... rsync://[<USER>@]<HOST>[:<PORT>]/<MODULE>[/<SRC>][/[.]]...
 or:   \\
           ${basename} <OPTION>...

Copy backup directories from sources \
using ${basename%backup*}backup-copy-rsync(1) and thus rsync(1).

A backup directory is copied using the following steps:

  An empty backup directory is created in a temporary directory.

  Files and directories are copied \
from a source backup directory \
to the newly created backup directory \
using ${basename%backup*}backup-copy-rsync(1) and thus rsync(1).

  A new symbolink link to denote the latest backup directory \
is created in a temporary directory.

  The newly created backup directory and \
the newly created symbolink link \
are moved to the final location.

Disk usage is minimised and \
transfers are speeded up \
by hard linking files \
from old backup directories \
to newly created backup directories \
whenever possible \
(when files in sources and previous backup directories are identical \
in content and in all preserved attributes).
On the btrfs and s3ql filesystems, \
hard linking \
is not needed and \
is therefore not used \
for disk usage minimisation.

Options:
    -h, --help[=<FORMAT>]
        Show this help message and exit.
    -V, --version
        Show version information and exit.

Rsync options:
$( exec rsync --help | exec sed '
	/^ *-/,/^$/!d
	/^ *--help/d
	/^ *--version/d
	/./!d
	s/^ */        /
	s/,-/, -/g
	/^ *-/{
		s//    -/
		s/\([^, ]\)  */\1\
        /
	}
' )

Operands:
    <SRC>/[.]
        A local directory containing backup directories to be copied.
    <SRC>
        A local backup directory to be copied.
    [<USER>@]<HOST>:<SRC>/[.]
        A remote directory containing backup directories to be copied via a remote shell.
    [<USER>@]<HOST>:<SRC>
        A remote backup directory to be copied via a remote shell.
    [<USER>@]<HOST>::<MODULE>[/<SRC>]/[.]
        A remote directory containing backup directories to be copied via an rsync daemon.
    [<USER>@]<HOST>::<MODULE>/<SRC>
        A remote backup directory to be copied via an rsync daemon.
    rsync://[<USER>@]<HOST>[:<PORT>]/<MODULE>[/<SRC>]/[.]
        A remote directory containing backup directories to be copied via an rsync daemon.
    rsync://[<USER>@]<HOST>[:<PORT>]/<MODULE>/<SRC>
        A remote backup directory to be copied via an rsync daemon.

Files:
    ${dir}/<YEAR>
        A yearly backup directory.
    ${dir}/<YEAR>[-]<MONTH>
        A monthly backup directory.
    ${dir}/<YEAR>[-]W<WEEK>
        A weekly backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>
        A daily backup directory.
    ${dir}/<YEAR>[-]W<WEEK>[-]<DAY>
        A daily backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>T<HOUR>
        An hourly backup directory.
    ${dir}/<YEAR>[-]W<WEEK>[-]<DAY>T<HOUR>
        An hourly backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>T<HOUR>[:]<MINUTE>
        A minutely backup directory.
    ${dir}/<YEAR>[-]W<WEEK>[-]<DAY>T<HOUR>[:]<MINUTE>
        A minutely backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>T<HOUR>[:]<MINUTE>[:]<SECOND>
        A secondly backup directory.
    ${dir}/<YEAR>[-]W<WEEK>[-]<DAY>T<HOUR>[:]<MINUTE>[:]<SECOND>
        A secondly backup directory.
    ${dir}/latest
        A symbolic link to the latest backup directory.
    ${dir}/conf/copy-config
        An optional configuration file \
used by ${basename%backup*}backup-copy-rsync(1) \
containing long option names (without leading slashes) and \
optional option arguments \
to be passed to rsync(1) \
when copying a backup directory.
    ${dir}/conf/rsh
        An optional script \
to be used as a remote shell instead of the plain ssh(1). \
This script can be used for setting identity files and proxy commands, \
for instance.
    ${dir}/conf/rsync-config
        An optional configuration file \
used by ${basename%backup*}backup-rsync(1) \
used by ${basename%backup*}backup-copy-rsync(1) and ${basename%backup*}backup-create-rsync(1) \
used by ${basename}(1) and ${basename%backup*}backup-create(1) \
containing long option names (without leading slashes) and \
optional option arguments \
to be passed to rsync(1).
    ${dir}/tmp/
        A temporary directory to be used for copying backup directories.
    ${dir}/tools/${basename%backup*}backup-rsync
        Used for copying files using rsync(1).

See also:
    ${basename%backup*}backup-clean-tmp(1),
    ${basename%backup*}backup-copy-rsync(1),
    ${basename%backup*}backup-mirror-sources(1)

    rsync(1),
    ssh(1)

    Home page <https://github.Eero.Häkkinen.fi/rsync-backup/>
__HELP__
		;;
	--help=help2man )
		COLUMNS=2500 exec "${0}" --help \
		| exec sed \
			-e '/^See also:$/,/^[^ ]/{s/^\(See also\):$/*\1*/;s/^ *//;}' \
			-e '/^    [^ ]/!b'	\
			-e '/[^ ]  /b'		\
			-e 'N'			\
			-e 's/\n        -/  ​-/'	\
			-e 's/\n        /  /'	\
			-e 'P'			\
			-e 'D'
		exit
		;;
	--help=man )
		exec "${0}" --help=troff \
		| exec man -l -- -
		exit
		;;
	--help=troff )
		cat << '__TROFF__'
.if '\*[.T]'html' \{\
.HEAD "<link href=""groff.css"" rel=""stylesheet"" type=""text/css"" />"
.HEAD "<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />"
.HX 0
.\}
__TROFF__
		exec help2man -h --help=help2man -L en_US.UTF-8 -N -n "${short_description}" -- "${0}" \
		| exec sed \
			-e '\|^[.]B backup|,\|^[.]SH |{' \
			-e '\|^[^.]|s| |&\\%|g' \
			-e '\|^[^.]|s|^|&\\%|' \
			-e '\|^[.]br$|d' \
			-e 's|^[.]B backup|.SY backup|' \
			-e '\|^[.]SH |i\
.YS' \
			-e '}' \
			-e 's|\([[:alpha:]][[:alnum:]\\_-]*\)[(]\([[:digit:]]*\)[)]|\\fB\1\\fR(\2)|g' \
			-e 's|^\(.*\) <\(https://[^<[:space:]>]*\)>$|.UR \2\
\1\
.UE|'
		exit
		;;
	--help=* )
		exec "${0}" --help=troff \
		| exec man -l -T"${1#*=}" -- -
		exit
		;;
	--version | -V )
		exec sed -n \
			-e '/^[^#]/q'				\
			-e "3s/^# [^ ]* /# ${basename} /"	\
			-e 's/^#\( \(.*\)\)*$/\2/p'		\
			-e '/^##/{2!q;}'			\
			-- "${me}"
		;;
	esac
	break
done

# Find out rsync options requiring an option argument.
rsync_optarg_opts=$( LC_ALL=C exec rsync --help | exec sed '
	/^ *-/,/^$/!d
	s/^ *\(\(-[^(), ]*\(, \)*\)*\).*/\1/
	/=[^, ]*/!d
	s///
	s/[, ][, ]*/ /g
' )

# Parse options, option arguments and operands.
unset argtype parallel
for arg
do
	# Parse an option or an option argument.
	case ${argtype-opt}:${arg} in
	opt:-- ) # --
		# Drop the end of options option and operands.
		set -- ${argtype+"${@}"} #"
		argtype=operand
		continue
		;;
	opt:--backup-parallel )
		parallel=
		continue
		;;
	opt:-?* ) # -<OPT>[...][<OPTARG>], --<OPT>[=<OPTARG>]
		# Keep an option.
		set -- ${argtype+"${@}"} "${arg}" #"
		case ${arg} in
		--?*=* ) # --<OPT>=<OPTARG>
			argtype=opt
			;;
		--?* ) # --<OPT>
			case " ${rsync_optarg_opts:?} " in
			*[[:space:]]"${arg}"[[:space:]]* ) # --<OPT> <OPTARG>
				argtype=optarg
				;;
			* ) # --<OPT>
				argtype=opt
				;;
			esac
			;;
		* )
			while :
			do
				case " ${rsync_optarg_opts:?} " in
				*[[:space:]]"${arg%"${arg#-?}"}"[[:space:]]* )
					case ${arg} in
					-??* ) # -<OPT><OPTARG>
						argtype=opt
						;;
					* ) # -<OPT> <OPTARG>
						argtype=optarg
						;;
					esac
					;;
				* )
					case ${arg} in
					-??* ) # -<OPT><OPT>[...][<OPTARG>]
						arg=-${arg#-?}
						continue
						;;
					* ) # -<OPT>
						argtype=opt
						;;
					esac
					;;
				esac
				break
			done
			;;
		esac
		continue
		;;
	opt:* ) # <OPERAND>
		# Drop operands.
		set -- ${argtype+"${@}"} #"
		argtype=operand
		;;
	optarg:* ) # <OPTARG>
		# Keep an option argument.
		set -- "${@}" "${arg}"
		argtype=opt
		continue
		;;
	esac
	# Parse an operand.
	case ${arg} in
	*/ | */. ) # <SRC>/[.]
		# Clean up temporary directories.
		"${0%backup*}backup-clean-tmp" -- copy
		# Create a protected temporary directory.
		mkdir -m go= -- "${dir}/tmp/copy-${$}"
		# Find out the backup directories to be copied.
		exclude=$(
			exec ls -- "${dir}/" \
			| exec sed -n -e '/./s|^[[:digit:]][[:digit:][:punct:]TW]*$|--exclude=/&/|p'
			)
		"${0%backup*}backup-copy-rsync" \
			--exclude='/*[![:digit:][:punct:]TW]*'	\
			--exclude='/*/*'			\
			${exclude}				\
			"${@}"					\
			--include='/[[:digit:]]*/'		\
			--exclude='/*'				\
			--exclude='/*/*'			\
			-- "${arg%/*}/./" "${dir}/tmp/copy-${$}/"
		# Copy the backup directories.
		pids=
		while :
		do
			tag=$(
				exec ls -rt -- "${dir}/tmp/copy-${$}/" \
				| exec sed \
					-e '\|[]()*/?\\[]|d' \
					-e '\|^[[:digit:]][[:digit:][:punct:]TW]*$|!d' \
					-e 'q'
				)
			${tag:+:} break
			# Create a protected temporary directory,
			# copy the backup directory to the protected temporary
			# directory, release the copied backup directory and
			# remove the protected temporary directory.
			"${0%backup*}backup-copy-rsync" "${@}" -- \
				"${arg%/*}/${tag}/./" \
				"${dir}/tmp/copy-${tag}-${$}/${tag}" &
			case ${parallel++} in
			+ ) pids="${pids} ${!}" ;;
			* ) wait "${!}" ;;
			esac
			# Proceed to the next tag.
			rmdir -- "${dir}/tmp/copy-${$}/${tag}"
		done
		for pid in ${pids}
		do
			wait "${pid}" || { wait; false; }
		done
		# Remove the protected temporary directory.
		rm -fr -- "${dir}/tmp/copy-${$}"
		;;
	* ) # <SRC>
		# Extract the tag name.
		tag=$( basename -- "${arg}" )
		# Create a protected temporary directory,
		# copy the backup directory to the protected temporary
		# directory, release the copied backup directory and
		# remove the protected temporary directory.
		"${0%backup*}backup-copy-rsync" "${@}" -- \
			"${arg}/./" "${dir}/tmp/copy-${tag}-${$}/${tag}"
		;;
	esac
done
