#! /bin/sh -Ceu
###########################################################################
# backup-mirror-pull 0.0.20130629
#
# Copyright (C) 2010-2013 Eero Häkkinen <Eero+rsync-backup@Häkkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
# Try to be nice.
{
	ionice -c 3  -p "${$}"
	renice -n 10 -p "${$}"
} > /dev/null 2>&1 || :

# Locate the script.
me=$( which -- "${0}" || ls -d -- "${0}" )
dir=$( dirname -- "${me}" )
case ${dir} in
. ) dir=.. ;;
* ) dir=$( dirname -- "${dir}" ) ;;
esac

short_description='pull backups'


case ${1-} in
--help | -h ) exec fmt -s -w "${COLUMNS:-$( tput cols )}" << __HELP__
Usage: ${0##*[\\/]} [<RSYNC-OPTION>]... [[<USER>@]<HOST>:]<SRC>[/[.]]...
 or:   ${0##*[\\/]} <OPTION>...

Pull backups using rsync(1). \
Each backup directory is pulled using the following steps:

  Old temporary backup directories are deleted.

  A new backup directory is created in a temporary directory.

  Files and directories are copied \
from the source backup directory \
to the newly created backup directory \
using rsync(1).

  A new symbolink link to denote the latest backup directory \
is created in a temporary directory.

  The newly created backup directory and \
the newly created symbolink link \
are moved to the final location.

Disk usage is minimised and \
the transfer is speeded up \
by hard linking files \
from old backup directories \
to the newly created backup directory \
whenever possible \
(when files in sources and previous backup directories are identical \
in content and in all preserved attributes). \
On the s3ql filesystem, \
hard linking \
is not needed and \
is therefore not used \
for disk usage minimisation.

Options:
    -h, --help[=<FORMAT>]
        Show this help message and exit.
    -V, --version
        Show version information and exit.

Rsync options:
$( rsync --help | sed '
	/^ *-/,/^$/!d
	/ --help/d
	/ --version/d
	/./!d
	s/^ */        /
	s/,-/, -/g
	/^ *-/{
		s//    -/
		s/\([^, ]\) /\1\
/
	}
	P
	D
' )

Operands:
    [[<USER>@]<HOST>:]<SRC>/[.]
        A directory containing source backup directories to be pulled.
    [[<USER>@]<HOST>:]<SRC>
        A source backup directory to be pulled.

Files:
    ${dir}/<YEAR>
        A yearly backup directory.
    ${dir}/<YEAR>[-]<MONTH>
        A monthly backup directory.
    ${dir}/<YEAR>[-]W<WEEK>
        A weekly backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>
        A daily backup directory.
    ${dir}/<YEAR>[-]W<WEEK>[-]<DAY>
        A daily backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>T<HOUR>
        An hourly backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>T<HOUR>[:]<MINUTE>
        A minutely backup directory.
    ${dir}/<YEAR>[-]<MONTH>[-]<DAY>T<HOUR>[:]<MINUTE>[:]<SECOND>
        A secondly backup directory.
    ${dir}/latest
        A symbolic link to the latest backup directory.
    ${dir}/conf/config
        An optional configuration file \
containing long option names (without leading slashes) and \
optional option arguments \
to be passed to rsync(1).
    ${dir}/conf/rsh
        An optional script \
to be used as a remote shell instead of the plain ssh(1). \
This script can be used for setting identity files and proxy commands, \
for instance.
    $( which rsync )
        A fast and extraordinarily versatile file copying tool. \
See also rsync(1).
    $( which ssh )
        A remote login program. \
See also ssh(1).
__HELP__
;;
--help=help2man )
	COLUMNS=2500 exec "${0}" --help \
	| sed \
		-e '/^    [^ ]/!b'	\
		-e 'N'			\
		-e 's/\n        /  /'	\
		-e 'P'			\
		-e 'D'
	exit
	;;
--help=man )
	exec "${0}" --help=troff \
	| exec man -l -- -
	exit
	;;
--help=troff )
	exec help2man -h --help=help2man -L en_US.UTF-8 -N -n "${short_description}" -- "${0}" \
	| exec sed -e 's/\([[:alnum:]\\-][[:alnum:]\\-]*\)[(]\([[:digit:]]*\)[)]/\\fB\1\\fR(\2)/g'
	exit
	;;
--version | -V )
	exec sed -n \
		-e '/^[^#]/q'				\
		-e "3s/^# [^ ]* /# ${0##*[\\/]} /"	\
		-e 's/^#\( \(.*\)\)*$/\2/p'		\
		-e '/^##/{2!q;}'			\
		-- "${me}"
	;;
esac

# Find out rsync options requiring an option argument.
rsync_optarg_opts=$( LC_ALL=C rsync --help | sed '
	/^ *-/,/^$/!d
	s/^ *\(\(-[^(), ]*\(, \)*\)*\).*/\1/
	/=.*/!d
	s///
	s/[, ][, ]*/ /g
' )

# Parse options, option arguments and operands.
unset argtype
for arg
do
	# Parse an option or an option argument.
	case ${argtype-opt}:${arg} in
	opt:-- ) # --
		# Drop the end of options option and operands.
		set -- ${argtype+"${@}"}
		argtype=operand
		continue
		;;
	opt:-?* ) # -<OPT>[...][<OPTARG>], --<OPT>[=<OPTARG>]
		# Keep an option.
		set -- ${argtype+"${@}"} "${arg}"
		case ${arg} in
		--?*=* ) # --<OPT>=<OPTARG>
			argtype=opt
			;;
		--?* ) # --<OPT>
			case " ${rsync_optarg_opts:?} " in
			*[[:space:]]"${arg}"[[:space:]]* ) # --<OPT> <OPTARG>
				argtype=optarg
				;;
			* ) # --<OPT>
				argtype=opt
				;;
			esac
			;;
		* )
			while :
			do
				case " ${rsync_optarg_opts:?} " in
				*[[:space:]]"${arg%"${arg#-?}"}"[[:space:]]* )
					case ${arg} in
					-??* ) # -<OPT><OPTARG>
						argtype=opt
						;;
					* ) # -<OPT> <OPTARG>
						argtype=optarg
						;;
					esac
					break
					;;
				* )
					case ${arg} in
					-??* ) # -<OPT><OPT>[...][<OPTARG>]
						arg=-${arg#-?}
						;;
					* ) # -<OPT>
						argtype=opt
						break
						;;
					esac
					;;
				esac
			done
			;;
		esac
		continue
		;;
	opt:* ) # <OPERAND>
		# Drop operands.
		set -- ${argtype+"${@}"}
		argtype=operand
		;;
	optarg:* ) # <OPTARG>
		# Keep an option argument.
		set -- "${@}" "${arg}"
		argtype=opt
		continue
		;;
	esac
	# Parse an operand.
	case ${arg} in
	*/ | */. ) # [[<USER>@]<HOST>:]<SRC>/[.]
		# Create a protected temporary directory.
		fstype=$( find "${dir}/." -prune -printf '%F\n' )
		mkdir -m go=u-w -p -- "${dir}/tmp"
		mkdir -m go=    -p -- "${dir}/tmp/old" "${dir}/tmp/${$}"
		mv                 -- "${dir}/tmp"/[[:digit:]]* "${dir}/tmp/old/"
		case ${fstype} in
		fuse.s3ql ) s3qlrm -- "${dir}/tmp/old" ;;
		*         ) rm -fr -- "${dir}/tmp/old" ;;
		esac
		mkdir -m go=       -- "${dir}/tmp/${$}"
		# Find out the backup directories to be pulled.
		exclude="
$(
	ls -- "${dir}/" \
	| sed -n -e '/./s|^[[:digit:][:punct:]TW]*$|--exclude=/&/|p'
	)
--exclude=/*[![:digit:][:punct:]TW]*
--include=/[[:digit:]]*/
--exclude=/*
--exclude=/*/*
"
		set -f
		"${0%backup-*}backup-rsync" \
			--filter='clear'	\
			${exclude}		\
			"${@}"			\
			-- "${arg%/*}/./" "${dir}/tmp/${$}/"
		set +f
		# Pull the backup directories.
		for tag in "${dir}/tmp/${$}"/*
		do
			tag=${tag##*/}
			case ${tag} in
			*[![:digit:][:punct:]TW]* ) ;;
			[[:digit:]]* ) "${0%backup-*}backup-create" \
				--backup-tag-name="${tag}"	\
				--filter='clear'		\
				"${@}"				\
				-- "${arg%/*}/${tag}/./" ;;
			esac
		done
		# Clean up.
		rm -fr -- "${dir}/tmp/${$}"
		;;
	* ) # [[<USER>@]<HOST>:]<SRC>
		# Pull a backup directory.
		tag=$( basename -- "${arg}" )
		"${0%backup-*}backup-create" \
			--backup-tag-name="${tag}"	\
			--filter='clear'		\
			"${@}"				\
			-- "${arg}/./"
		;;
	esac
done
