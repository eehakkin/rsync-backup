#! /usr/bin/env python3
# backup-du - estimate file space usage
__copyright__ = '''
###########################################################################
# backup-du 0.0.20220616
#
# Copyright (C) 2022 Eero Häkkinen <Eero+rsync-backup@Häkkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
'''.strip('\n\r #').replace('\n# ', '\n').replace('\n#', '\n')
__version__ = __copyright__.split(None, 2)[1]

PREFIXES = tuple(enumerate(('', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')))[::-1]
SI_PREFIXES = tuple((1000**i, prefix) for i, prefix in PREFIXES)
IEC_PREFIXES = tuple((1 << (10 * i), prefix and f'{prefix.upper()}i') for i, prefix in PREFIXES)

def du_file(path, *, count_links=False, dir_fd=None, shared_nlinks=None, st=None):
	import os, stat
	st = st or os.lstat(path, dir_fd=dir_fd)
	size = st.st_blocks << 9  # From 512 byte blocks to bytes.
	if st.st_nlink == 1 or shared_nlinks is None or stat.S_ISDIR(st.st_mode):
		# Unshared: first and last.
		return size, size
	size_if_count_links = count_links and size or 0
	shared_dev_nlinks = shared_nlinks.setdefault(st.st_dev, {})
	nlink = shared_dev_nlinks.get(st.st_ino, st.st_nlink)
	if nlink == 1:
		# Shared: last.
		del shared_dev_nlinks[st.st_ino]
		return size_if_count_links, size
	shared_dev_nlinks[st.st_ino] = nlink - 1
	if nlink == st.st_nlink:
		# Shared: first.
		return size, 0
	# Shared: not first nor last.
	return size_if_count_links, 0

def du_path(path, *, all=False, onerror=None, separate_dirs=False, summarize=True, **kwargs):
	import os, stat
	st = os.lstat(path)
	total_sizes = top_sizes = list(du_file(path, st=st, **kwargs))
	if stat.S_ISDIR(st.st_mode):
		if separate_dirs or not summarize:
			all_sizes = {path: top_sizes}
			if separate_dirs:
				total_sizes = [0, 0]
		for root, dirs, nondirs, root_fd in os.fwalk(
			path,
			onerror=onerror,
			topdown=False
			):
			root_sizes = (
				(separate_dirs and root == path) or
				not summarize
				) and all_sizes.setdefault(root, [0, 0])
			root_or_total_sizes = root_sizes or total_sizes
			for name in dirs:
				sizes = du_file(name, dir_fd=root_fd, **kwargs)
				if not summarize:
					dir_path = os.path.join(root, name)
					descendant_sizes = \
						all_sizes.pop(dir_path, None)
					if descendant_sizes:
						sizes = list(sizes)
						sizes[0] += descendant_sizes[0]
						sizes[1] += descendant_sizes[1]
					yield dir_path, *sizes
				if root_sizes and not separate_dirs:
					root_sizes[0] += sizes[0]
					root_sizes[1] += sizes[1]
				else:
					total_sizes[0] += sizes[0]
					total_sizes[1] += sizes[1]
			for name in nondirs:
				sizes = du_file(name, dir_fd=root_fd, **kwargs)
				if all and not summarize:
					yield os.path.join(root, name), *sizes
				root_or_total_sizes[0] += sizes[0]
				root_or_total_sizes[1] += sizes[1]
	yield path, *top_sizes
	if total_sizes is not top_sizes and any(total_sizes):
		total_sizes[0] += top_sizes[0]
		total_sizes[1] += top_sizes[1]
		yield None, *total_sizes

def format_human_readable_size(size, scales_and_prefixes, *, args=None):
	sizes = []
	for scale, prefix in scales_and_prefixes:
		n = size // scale
		if not n:
			continue
		if args and not args.full_size:
			return f'{size / scale:.1f}\u00A0{prefix}B'
		sizes.append(f'{n}\u00A0{prefix}B')
		size -= n * scale
	return sizes and ' '.join(sizes) or f'{size}\u00A0B'

def format_iec_size(size, *, args=None):
	return format_human_readable_size(size, IEC_PREFIXES, args=args)

def format_si_size(size, *, args=None):
	return format_human_readable_size(size, SI_PREFIXES, args=args)

def format_size(size, *, args=None, ceil=True):
	if args:
		if args.human_readable:
			return format_iec_size(size, args=args)
		if args.si:
			return format_si_size(size, args=args)
	block_size, unit = args.block_size if args else (1 << 10, '')
	sep = unit and '\u00A0'
	return f'{(size + (block_size - 1 if ceil else 0)) // block_size}{sep}{unit}'

def main():
	import argparse, os, string, sys
	def get_default_paths():
		dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
		return sorted(
			os.path.join(dir, name)
			for name in os.listdir(dir)
			if name[0] in string.digits and all(
				i in string.digits or
				i in string.punctuation or
				i in 'TW'
				for i in name
				)
			)
	def size(s):
		u = s.lstrip(string.digits)
		if u:
			scale = unit(u)
			if s == u:
				return scale, u
			return int(s.removesuffix(u)) * scale, ''
		return int(s), ''
	def unit(s):
		for scale, prefix in IEC_PREFIXES:
			if not prefix:
				continue
			if s == f'{prefix}B' or s == prefix[0]:
				return scale
		for scale, prefix in SI_PREFIXES:
			if s == f'{prefix}B':
				return scale
		raise ValueError(s)
	block_size = (1 << 9 if 'POSIXLY_CORRECT' in os.environ else 1 << 10, '')
	for i in ('DU_BLOCK_SIZE', 'BLOCK_SIZE', 'BLOCKSIZE'):
		if i in os.environ:
			try:
				block_size = size(os.environ[i])
			except ValueError:
				pass
			break
	parser = argparse.ArgumentParser(
		add_help=False,
		description='''
Summarize disk usage by counting used and releasable blocks and their sizes.''',
		epilog='''
See also:
    backup-help(1)

    Home page <https://github.Eero.Häkkinen.fi/rsync-backup/>''',
		formatter_class=argparse.RawDescriptionHelpFormatter
		)
	all_or_summarize = parser.add_mutually_exclusive_group()
	all_or_summarize.add_argument('-a', '--all', action='store_true', help='''
		Write counts for all files, not just directories.''')
	parser.add_argument('-B', '--block-size', default=block_size, metavar='<SIZE>', type=size, help='''
		Scale sizes down by <SIZE> before printing them.''')
	parser.add_argument('-l', '--count-links', action='store_true', help='''
		Count sizes many times if hard linked.''')
	parser.add_argument('-f', '--full-size', action='store_true', help='''
		Print full sizes.''')
	parser.add_argument('--help', action='append', metavar='<FORMAT>', nargs='?', help='''
		Show this help message and exit.''')
	parser.add_argument('--help=help', action='help', help=argparse.SUPPRESS)
	parser.add_argument('-h', '--human-readable', action='store_true', help='''
		Print sizes in human readable format.''')
	parser.add_argument('-k', action='store_const', const=(1 << 10, ''), dest='block_size', help='''
		Like --block-size=KiB.''')
	parser.add_argument('-m', action='store_const', const=(1 << 20, ''), dest='block_size', help='''
		Like --block-size=MiB.''')
	parser.add_argument('-S', '--separate-dirs', action='store_true', help='''
		For directories do not include size of subdirectories.''')
	parser.add_argument('--si', action='store_true', help='''
		Like --human-readable, but use powers of 1000 not 1024.''')
	all_or_summarize.add_argument('-s', '--summarize', action='store_true', help='''
		Display only a total for each argument.''')
	parser.add_argument('-c', '--total', action='store_true', help='''
		Produce a grand total.''')
	parser.add_argument('-V', '--version', action='version', version=__copyright__, help='''
		Show version information and exit.''')
	parser.add_argument('paths', metavar='<PATH>', nargs='*', help='''
		A path whose disk usage is to be summarized.''')
	args = parser.parse_args()
	for help_format in args.help or ():
		if help_format is None:
			parser.parse_args(['--help=help'])
		backup_help = 'backup-help'.join(sys.argv[0].rpartition('backup-du')[::2])
		os.environ['BACKUP_TOOL'] = sys.argv[0]
		os.execlp(backup_help, backup_help, f'--help={help_format}')
	shared_nlinks = {}
	if args.total:
		total_sizes = [0, 0]
	for path in args.paths or get_default_paths():
		for path, *sizes in du_path(
			path,
			all=args.all,
			count_links=args.count_links,
			onerror=lambda error: print(error, file=sys.stderr),
			separate_dirs=args.separate_dirs,
			shared_nlinks=shared_nlinks,
			summarize=args.summarize
			):
			if path is not None:
				path = (
					os.fsencode(path)
					.decode(errors='backslashreplace')
					)
				print_sizes(*sizes, path, args=args)
		if args.total:
			total_sizes[0] += sizes[0]
			total_sizes[1] += sizes[1]
	if args.total:
		print_sizes(*total_sizes, 'total', args=args)

def print_sizes(first_size, last_size, path, *, args=None, **kwargs):
	s1 = format_size(first_size, args=args, ceil=True)
	sep1 = max(2 - len(s1) // 8, 1) * '\t'
	s2 = format_size(last_size, args=args, ceil=False)
	sep2 = max(2 - len(s2) // 8, 1) * '\t'
	print(s1, sep1, s2, sep2, path, sep='', **kwargs)

if __name__ == '__main__':
	main()
