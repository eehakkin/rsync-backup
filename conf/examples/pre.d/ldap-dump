#! /bin/bash -Ceu
###########################################################################
# ldap-dump 0.0.20240102
#
# Copyright (C) 2010 - 2024 Eero Häkkinen <Eero+rsync-backup@Häkkinen.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###########################################################################
set -e -o pipefail

# Locate the script.
me=$( command -v -- "${0}" || ls -d -- "${0}" )
me_dir=$( dirname -- "${me}" )
me_dir=$( cd -- "${me_dir}" && pwd )

# Read and set configuration variables.
export LDAPURI=ldapi://
unset \
	LDAPSEARCH_OPTS \
	dump_dir \
	dump_group \
	dump_user \
	ldap_paged_size
dump_config=${me_dir%conf*}conf/dump-config
[ ! -f "${dump_config}" ] || . "${dump_config}"
LDAPSEARCH_OPTS=${LDAPSEARCH_OPTS-"-x"}
dump_user=${dump_user:-"backup"}
dump_group=${dump_group:-"${dump_user}"}
dump_dir=${dump_dir:-"/var/backups/${dump_user}"}
ldap_paged_size=${ldap_paged_size-"500"}

move_tmp_to_dst_or_remove_tmp() { # [--] <TMP> <DST>
	case ${1} in
	-- ) shift ;;
	esac
	if cmp -s -- "${@}"
	then
		# There are no changes
		# thus remove the temporary file and
		# keep the destination file intact.
		rm -f -- "${1}"
	else
		# There are changes
		# thus replace the destination file with
		# the temporary file.
		chown -h -- "${dump_user}:${dump_group}" "${1}"
		mv -f -- "${1}" "${2}"
	fi
}

# Create missing directories.
install -d -g "${dump_group}" -m 750 -o "${dump_user}" -- "${dump_dir}"

# Remove old temporary .backup-filter files.
rm -f -- "${dump_dir}/.backup-filter".*~
# Create a new temporary .backup-filter file.
cat > "${dump_dir}/.backup-filter.${$}~" << __BACKUP_FILTER__
- /*.*~
__BACKUP_FILTER__
# Replace the destination .backup-filter file
# with the new temporary .backup-filter file or
# remove the new temporary .backup-filter file.
move_tmp_to_dst_or_remove_tmp -- \
	"${dump_dir}/.backup-filter.${$}~" \
	"${dump_dir}/.backup-filter"

# Find out contexts.
ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
	-b '' \
	-o ldif-wrap=no \
	-s base \
	-- '(objectClass=*)' configContext namingContexts \
| sed -n -- 's|^[[:lower:]]*Contexts*: ||p' \
| {
	umask -- ug-w,o=
	while read -r base
	do
		dst_dump_file=${dump_dir}/$( basename -- "${base}" ).ldif.gz
		tmp_dump_file=${dst_dump_file}.${$}~
		# Clean up old temporary dump files.
		rm -f -- "${dst_dump_file}".*~
		# Dump to a new temporary dump file.
		ldapsearch -LLLM ${LDAPSEARCH_OPTS} \
			-b "${base}" \
			${ldap_paged_size:+ -E "pr=${ldap_paged_size}/noprompt" } \
			-o ldif-wrap=no \
			-- '(objectClass=*)' '*' + \
		| grep -Ev -- \
			'^(contextCSN|entryDN|hasSubordinates|structuralObjectClass|subschemaSubentry):' \
		| gzip -n >| "${tmp_dump_file}"
		# Replace the destination dump file
		# with the new temporary dump file or
		# remove the new temporary dump file.
		move_tmp_to_dst_or_remove_tmp -- \
			"${tmp_dump_file}" "${dst_dump_file}"
	done
}
